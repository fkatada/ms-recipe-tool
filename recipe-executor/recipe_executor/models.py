# This file was generated by Codebase-Generator, do not edit directly
"""
Models for the Recipe Executor system.

Defines Pydantic models for file specifications, step configurations, and recipe structures.
"""

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class FileSpec(BaseModel):
    """Represents a single file to be generated.

    Attributes:
        path: Relative path where the file should be written.
        content: The content of the file, which can be:
            - A string for text content.
            - A dict for structured content.
            - A list of dicts for multiple structured outputs.
    """

    path: str = Field(..., description="Relative file path to write to")
    content: Union[str, Dict[str, Any], List[Dict[str, Any]]] = Field(
        ...,
        description=("Content of the file, as raw text, a structured dict, or a list of dicts for multiple files"),
    )


class ReadFilesConfig(BaseModel):
    """Configuration for a 'read_files' recipe step."""

    path: str = Field(..., description="Path of the file to read")
    content_key: str = Field(
        ...,
        description="Key under which the content of the file will be stored in the execution context",
    )


class McpServer(BaseModel):
    """Definition of an MCP server for LLM generation steps."""

    command: str = Field(..., description="Command to invoke the MCP server")
    args: List[str] = Field(..., description="List of arguments for the MCP server command")
    env: Optional[Dict[str, str]] = Field(
        None,
        description="Optional environment variables mapping to set when starting the server",
    )


class LLMGenerateConfig(BaseModel):
    """Configuration for a 'llm_generate' recipe step."""

    prompt: str = Field(..., description="Prompt template for the language model")
    model: Optional[str] = Field(
        None,
        description="Optional language model identifier to use, e.g., 'openai/gpt-4'",
    )
    output_format: Optional[str] = Field(
        None,
        description="Optional format of the output, e.g., 'files', 'text', etc.'",
    )
    output_key: Optional[str] = Field(
        None,
        description="Optional key under which to store the generated output in context",
    )
    mcp_servers: Optional[List[McpServer]] = Field(
        None,
        description="Optional list of MCP server definitions for local or custom LLM invocation",
    )


class WriteFilesConfig(BaseModel):
    """Configuration for a 'write_files' recipe step."""

    files_key: str = Field(
        ...,
        description="Context key containing the list of FileSpec objects to write to disk",
    )
    root: Optional[str] = Field(
        None,
        description="Optional root directory under which to write the files",
    )


class RecipeStep(BaseModel):
    """A single step in a recipe.

    Attributes:
        type: The type of the recipe step (e.g., 'read_files', 'llm_generate', 'write_files').
        config: Step-specific configuration as a dict or Pydantic model.
    """

    type: str = Field(..., description="Type of the recipe step to execute")
    config: Dict[str, Any] = Field(
        ...,
        description=(
            "Configuration for the step. Known step types may be validated against their Pydantic models; "
            "unknown types remain a raw dict."
        ),
    )


class Recipe(BaseModel):
    """A complete recipe composed of multiple steps and optional environment variable declarations.

    Attributes:
        steps: Ordered list of steps to run.
        env_vars: Optional list of environment variable names required by the recipe.
    """

    steps: List[RecipeStep] = Field(..., description="Ordered list of recipe steps")
    env_vars: Optional[List[str]] = Field(
        None,
        description="Optional list of environment variable names required for the recipe",
    )


__all__ = [
    "FileSpec",
    "ReadFilesConfig",
    "McpServer",
    "LLMGenerateConfig",
    "WriteFilesConfig",
    "RecipeStep",
    "Recipe",
]
