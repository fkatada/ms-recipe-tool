# This file was generated by Codebase-Generator, do not edit directly
"""
Responses component for Recipe Executor.
Provides OpenAI built-in tool integration via PydanticAI Responses API.
"""

import logging
import os
from typing import Optional

from pydantic_ai.models.openai import OpenAIResponsesModel


def get_openai_responses_model(
    logger: logging.Logger,
    model_name: Optional[str] = None,
) -> OpenAIResponsesModel:
    """
    Create and return an OpenAIResponsesModel configured for built-in tool usage.

    Args:
        logger (logging.Logger): Logger for debug and info messages.
        model_name (Optional[str]): Specific model name to use (e.g., "gpt-4o").
            If not provided, DEFAULT_MODEL environment variable will be used.

    Returns:
        OpenAIResponsesModel: Configured PydanticAI OpenAIResponsesModel instance.

    Raises:
        ValueError: If OPENAI_API_KEY or model name is missing.
        Exception: If model instantiation fails.
    """
    # Load environment configuration
    default_model = os.environ.get("DEFAULT_MODEL")
    api_key = os.environ.get("OPENAI_API_KEY")

    def mask_secret(secret: Optional[str]) -> str:
        if not secret:
            return ""
        length = len(secret)
        if length <= 2:
            return "*" * length
        return f"{secret[0]}{'*' * (length - 2)}{secret[-1]}"

    masked_key = mask_secret(api_key)
    logger.debug(
        "Loaded environment variables: DEFAULT_MODEL=%s, OPENAI_API_KEY=%s",
        default_model,
        masked_key,
    )

    # Ensure API key is present
    if not api_key:
        logger.error("OPENAI_API_KEY environment variable is not set")
        raise ValueError("Missing OPENAI_API_KEY environment variable")

    # Determine which model to use
    chosen_model = model_name or default_model
    if not chosen_model:
        logger.error("Model name not provided and DEFAULT_MODEL environment variable is not set")
        raise ValueError("Model name must be provided or set via DEFAULT_MODEL environment variable")

    logger.info("Using OpenAI Responses model: %s", chosen_model)

    # Instantiate the model
    try:
        return OpenAIResponsesModel(chosen_model)
    except Exception as e:
        logger.error(
            "Failed to create OpenAIResponsesModel for model %s: %s",
            chosen_model,
            str(e),
            exc_info=True,
        )
        raise
