# This file was generated by Codebase-Generator, do not edit directly
"""
DocpackExtractStep: Unpack .docpack archives to extract outline JSON and resources.
"""

import logging
from pathlib import Path
from typing import Any, List

from recipe_executor.protocols import ContextProtocol
from recipe_executor.steps.base import BaseStep, StepConfig
from recipe_executor.utils.templates import render_template

try:
    from docpack_file import DocpackHandler
except ImportError:
    # Assuming docpack-file library provides DocpackHandler
    from docpack_file.handler import DocpackHandler


class DocpackExtractConfig(StepConfig):
    """
    Configuration for DocpackExtractStep.

    Fields:
        docpack_path (str): Path to .docpack file to extract (may be templated).
        extract_dir (str): Directory to extract files to (may be templated).
        outline_key (str): Context key to store outline JSON (may be templated).
        resources_key (str): Context key to store resource file paths (may be templated).
    """

    docpack_path: str
    extract_dir: str
    outline_key: str = "outline_data"
    resources_key: str = "resource_files"


class DocpackExtractStep(BaseStep[DocpackExtractConfig]):
    """
    Step to extract .docpack archives into outline data and resource files.
    """

    def __init__(self, logger: logging.Logger, config: dict[str, Any]) -> None:
        # Validate and store configuration
        cfg = DocpackExtractConfig.model_validate(config)
        super().__init__(logger, cfg)

    async def execute(self, context: ContextProtocol) -> None:
        # Render templated parameters
        raw_docpack = render_template(self.config.docpack_path, context)
        raw_extract = render_template(self.config.extract_dir, context)
        outline_key = render_template(self.config.outline_key, context)
        resources_key = render_template(self.config.resources_key, context)

        docpack_path = Path(raw_docpack)
        extract_dir = Path(raw_extract)

        self.logger.debug(
            f"DocpackExtractStep config resolved: docpack_path={docpack_path}, "
            f"extract_dir={extract_dir}, outline_key={outline_key}, "
            f"resources_key={resources_key}"
        )

        # Validate .docpack file exists and is a valid .docpack
        if not docpack_path.exists() or not docpack_path.is_file():
            msg = f".docpack file not found at path: {docpack_path}"
            self.logger.error(msg)
            raise FileNotFoundError(msg)
        if docpack_path.suffix.lower() != ".docpack":
            msg = f"Invalid file extension for docpack: {docpack_path.suffix}, expected .docpack"
            self.logger.error(msg)
            raise ValueError(msg)

        # Prepare extraction directory
        try:
            extract_dir.mkdir(parents=True, exist_ok=True)
        except Exception as e:
            msg = f"Cannot create or access extract directory at {extract_dir}: {e}"
            self.logger.error(msg)
            raise IOError(msg)

        # Perform extraction
        try:
            outline_data, resource_files = DocpackHandler.extract_package(docpack_path, extract_dir)
        except Exception as e:
            msg = f"Failed to extract .docpack archive at {docpack_path}: {e}"
            self.logger.error(msg)
            raise RuntimeError(msg) from e

        # Normalize resource paths to absolute
        abs_resources: List[str] = []
        try:
            for rf in resource_files:
                # rf may be str or Path
                p: Path = rf if isinstance(rf, Path) else Path(rf)
                abs_resources.append(str(p.resolve()))

            # Update outline_data resource paths if present
            if isinstance(outline_data, dict) and "resources" in outline_data:
                resources_list = outline_data.get("resources")
                if isinstance(resources_list, list):
                    for item in resources_list:
                        if isinstance(item, dict) and "path" in item:
                            item_path = Path(item["path"])  # type: ignore
                            item["path"] = str(item_path.resolve())  # type: ignore
        except Exception as e:
            # Non-fatal: log and continue
            self.logger.debug(f"Error normalizing resource paths: {e}")

        # Debug log the list of extracted files
        self.logger.debug(f"Extracted resource files: {abs_resources}")

        # Store results in context for downstream steps
        context[outline_key] = outline_data
        context[resources_key] = abs_resources

        count = len(abs_resources)
        self.logger.info(f"Successfully extracted {count} resource file(s) from {docpack_path} into {extract_dir}")
